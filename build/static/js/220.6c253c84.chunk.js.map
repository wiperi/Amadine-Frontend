{"version":3,"file":"static/js/220.6c253c84.chunk.js","mappings":"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","sources":["pages/Login.tsx","utils/helpers.ts"],"sourcesContent":["import React, { useState } from 'react';\r\nimport type { FormProps } from 'antd';\r\nimport { Button, Checkbox, Form, Input, Layout, message } from 'antd';\r\nimport '@/styles/global.css';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchRegisterApi, fetchLoginApi } from '@/store/modules/userStore';\r\nimport { AxiosError } from 'axios';\r\nimport { catchAxiosError } from '@/utils/helpers';\r\nconst { Content } = Layout;\r\n\r\ntype FieldType = {\r\n  email?: string;\r\n  name?: string;\r\n  password?: string;\r\n  remember?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n};\r\n\r\nconst Login: React.FC = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const onFinishLogin: FormProps<FieldType>['onFinish'] = async (values) => {\r\n    try {\r\n      await dispatch(fetchLoginApi(values.email as string, values.password as string));\r\n      message.success('Login successful');\r\n      navigate('/quiz');\r\n    } catch (error) {\r\n      console.log(error);\r\n      if (error instanceof AxiosError) {\r\n        message.error(error.response?.data?.error);\r\n      } else {\r\n        message.error('Failed to login');\r\n      }\r\n    }\r\n  };\r\n\r\n  const onFinishRegister: FormProps<FieldType>['onFinish'] = async (values) => {\r\n    console.log('Success:', values);\r\n    try {\r\n      await dispatch(\r\n        fetchRegisterApi(\r\n          values.email as string,\r\n          values.password as string,\r\n          values.firstName as string,\r\n          values.lastName as string\r\n        )\r\n      );\r\n      message.success('Register successful');\r\n      navigate('/');\r\n    } catch (error: any) {\r\n      message.error(error.response.data.error);\r\n    }\r\n  };\r\n\r\n  const onFinishFailed: FormProps<FieldType>['onFinishFailed'] = (errorInfo) => {\r\n    console.log('Failed:', errorInfo);\r\n  };\r\n\r\n  const [isRegister, setIsRegister] = useState(false);\r\n\r\n  return (\r\n    <Layout style={{ minHeight: '100vh', backgroundColor: '#f0f2f5' }}>\r\n      <Content style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n        {/* Login and Register box */}\r\n        <div className=\"rounded bg-white p-6 shadow-md\">\r\n          {/* Title */}\r\n          <h1 style={{ textAlign: 'center', marginBottom: 24 }}>\r\n            {isRegister ? 'Register' : 'Login'}\r\n          </h1>\r\n\r\n          {/* Login Form */}\r\n          <Form\r\n            name=\"loginForm\"\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 18 }}\r\n            style={{ maxWidth: 600, display: isRegister ? 'none' : 'block' }}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinishLogin}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item<FieldType>\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                { required: true, message: 'Please input your email!' },\r\n                { type: 'email', message: 'Please enter a valid email address!' },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              rules={[\r\n                { required: true, message: 'Please input your password!' },\r\n                {\r\n                  pattern: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/,\r\n                  message:\r\n                    'Password must be at least 8 characters long and contain at least 1 letter, 1 number',\r\n                },\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              name=\"remember\"\r\n              valuePropName=\"checked\"\r\n              wrapperCol={{ offset: 6, span: 24 }}\r\n            >\r\n              <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item wrapperCol={{ offset: 6, span: 24 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Login\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n\r\n          {/* Register From */}\r\n          <Form\r\n            name=\"registerForm\"\r\n            labelCol={{ span: 6 }}\r\n            wrapperCol={{ span: 18 }}\r\n            style={{ maxWidth: 600, display: isRegister ? 'block' : 'none' }}\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinishRegister}\r\n            onFinishFailed={onFinishFailed}\r\n            autoComplete=\"off\"\r\n          >\r\n            <Form.Item<FieldType>\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              rules={[\r\n                { required: true, message: 'Please input your email!' },\r\n                { type: 'email', message: 'Please enter a valid email address!' },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType> label=\"Name\">\r\n              <Input.Group compact>\r\n                <Form.Item\r\n                  name=\"firstName\"\r\n                  noStyle\r\n                  rules={[{ required: true, message: 'Please input your first name!' }]}\r\n                >\r\n                  <Input style={{ width: '50%' }} placeholder=\"First Name\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                  name=\"lastName\"\r\n                  noStyle\r\n                  rules={[{ required: true, message: 'Please input your last name!' }]}\r\n                >\r\n                  <Input style={{ width: '50%' }} placeholder=\"Last Name\" />\r\n                </Form.Item>\r\n              </Input.Group>\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              rules={[{ required: true, message: 'Please input your password!' }]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item<FieldType>\r\n              name=\"remember\"\r\n              valuePropName=\"checked\"\r\n              wrapperCol={{ offset: 6, span: 24 }}\r\n            >\r\n              <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item wrapperCol={{ offset: 6, span: 24 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Register\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n\r\n          {/* Bottom buttons */}\r\n          <Button\r\n            type=\"link\"\r\n            style={{ marginLeft: '5rem' }}\r\n            onClick={() => setIsRegister(!isRegister)}\r\n          >\r\n            {isRegister ? 'Login' : 'Register'}\r\n          </Button>\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              catchAxiosError(async () => {\r\n                await dispatch(fetchLoginApi('root@root.com', 'root1234'));\r\n                message.success('Login successful');\r\n                navigate('/quiz');\r\n              });\r\n            }}\r\n          >\r\n            Login with Demo Account\r\n          </Button>\r\n        </div>\r\n      </Content>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { message } from 'antd';\r\nimport { AxiosError } from 'axios';\r\n\r\nexport async function catchAxiosError(fn: (...args: any[]) => unknown) {\r\n  try {\r\n    await fn();\r\n  } catch (error) {\r\n    if (error instanceof AxiosError) {\r\n      return message.error(error.response?.data?.error || 'Internal server error');\r\n    }\r\n    if (error instanceof Error) {\r\n      return message.error(error.message);\r\n    }\r\n    \r\n    return message.error('An unknown error occurred');\r\n  }\r\n}\r\n"],"names":["Content","Layout","Login","navigate","useNavigate","dispatch","useDispatch","onFinishFailed","errorInfo","console","log","isRegister","setIsRegister","useState","_jsx","style","minHeight","backgroundColor","children","display","justifyContent","alignItems","_jsxs","className","textAlign","marginBottom","Form","name","labelCol","span","wrapperCol","maxWidth","initialValues","remember","onFinish","async","fetchLoginApi","values","email","password","message","success","error","_error$response","_error$response$data","AxiosError","response","data","autoComplete","Item","label","rules","required","type","Input","pattern","Password","valuePropName","offset","Checkbox","Button","htmlType","fetchRegisterApi","firstName","lastName","Group","compact","noStyle","width","placeholder","marginLeft","onClick","catchAxiosError","fn","Error"],"sourceRoot":""}