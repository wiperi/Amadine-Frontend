{"version":3,"file":"static/js/690.b30a2634.chunk.js","mappings":"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","sources":["pages/QuizCard.tsx","pages/AnswersEditTable.tsx","pages/QuestionEditTable.tsx","pages/QuizEditModal.tsx","pages/Quiz.tsx","utils/helpers.ts"],"sourcesContent":["import { Descriptions, DescriptionsProps } from 'antd';\r\nimport { Quiz } from '../types/UserStore';\r\nimport { Card, Button } from 'antd';\r\nimport { quizSessionCreate } from '@/apis/quiz';\r\nimport { catchAxiosError } from '@/utils/helpers';\r\n\r\nconst QuizDescription: React.FC<{ quiz: Quiz }> = ({ quiz }) => {\r\n  const items: DescriptionsProps['items'] = [\r\n    // {\r\n    //   key: '1',\r\n    //   label: 'Num of Questions',\r\n    //   children: quiz.numQuestions.toString(),\r\n    // },\r\n    {\r\n      key: '2',\r\n      label: 'Time Created',\r\n      children: new Date(quiz.timeCreated * 1000).toLocaleDateString(),\r\n    },\r\n    {\r\n      key: '3',\r\n      label: 'Duration',\r\n      children: `${quiz.duration} seconds`,\r\n    },\r\n  ];\r\n  return <Descriptions title={quiz.name} items={items} column={1} size=\"small\" />;\r\n};\r\n\r\nconst QuizCard: React.FC<{ quiz: Quiz; onClick: () => void }> = ({ quiz, onClick }) => {\r\n  return (\r\n    <Card\r\n      hoverable\r\n      className=\"group relative h-60 w-72 overflow-hidden transition-all duration-300\"\r\n      cover={\r\n        <div className=\"absolute inset-0\">\r\n          <img\r\n            src=\"https://static.vecteezy.com/system/resources/thumbnails/029/291/834/small/quiz-logo-with-speech-bubble-symbols-concept-of-questionnaire-show-sing-quiz-button-question-competition-png.png\"\r\n            alt=\"Background\"\r\n            className=\"h-full w-full object-cover\"\r\n          />\r\n        </div>\r\n      }\r\n      onClick={onClick}\r\n    >\r\n      <div className=\"absolute left-0 top-44 h-full w-full rounded-lg bg-gray-100 p-4 shadow-lg transition-all duration-300 ease-in-out group-hover:-translate-y-32 group-hover:shadow-xl\">\r\n        <QuizDescription quiz={quiz} />\r\n        <Button\r\n          className=\"absolute left-1/2 mt-4 w-[90%] -translate-x-1/2\"\r\n          type=\"primary\"\r\n          onClick={async (ev) => {\r\n            ev.stopPropagation();\r\n            catchAxiosError(async () => {\r\n              // prompt user to input start number\r\n              const startNum = prompt('Please input the auto start player number');\r\n              if (!startNum) {\r\n                return;\r\n              }\r\n              const {\r\n                data: { sessionId },\r\n              } = await quizSessionCreate(quiz.quizId, parseInt(startNum));\r\n              window.open(\r\n                `/quiz-session/${sessionId}/admin?quizId=${quiz.quizId}&autoStartNum=${startNum}`,\r\n                '_blank'\r\n              );\r\n            });\r\n          }}\r\n        >\r\n          Play\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default QuizCard;\r\n","import React, { useState } from 'react';\r\nimport { ProColumns, EditableProTable } from '@ant-design/pro-components';\r\nimport { Answer, Question } from '@/types/UserStore';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setEditingAnswers } from '@/store/modules/userStore';\r\nimport { message, Tooltip } from 'antd';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nconst AnswersEditTable: React.FC<{\r\n  questionId: number | undefined;\r\n}> = ({ questionId }) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const answers: Answer[] = useSelector((state: any) => state.user.editingQuiz)?.questions\r\n    ?.find((question: Question) => question.questionId === questionId)?.answers || [];\r\n\r\n  const [editableKeys, setEditableKeys] = useState<React.Key[]>([]);\r\n\r\n  const columns: ProColumns<Answer>[] = [\r\n    {\r\n      title: (\r\n        <Tooltip title=\"Question can have 3 - 6 answers, including at least one correct answer\">\r\n          Answers<span className='ml-1'><QuestionCircleOutlined /></span>\r\n        </Tooltip>\r\n      ),\r\n      dataIndex: 'answer',\r\n      width: '40%',\r\n      formItemProps: {\r\n        rules: [\r\n          { required: true, message: 'Answer is required' },\r\n          { max: 30, message: 'Answer must be less than 30 characters' },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      title: 'Correct',\r\n      dataIndex: 'correct',\r\n      valueType: 'switch',\r\n      width: '20%',\r\n      // Define the value enum for the switch\r\n      valueEnum: {\r\n        true: { text: 'Correct', status: 'Success' },\r\n        false: { text: 'Wrong', status: 'Error' },\r\n      },\r\n      render: (_, record) => (\r\n        <span style={{ color: record.correct ? '#52c41a' : '#ff4d4f' }}>\r\n          {record.correct ? 'Correct' : 'Wrong'}\r\n        </span>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Actions',\r\n      valueType: 'option',\r\n      width: '25%',\r\n\r\n      // For every action column, render the following elements\r\n      render: (text, record, _, action) => [\r\n        // text: the text of current cell\r\n        // record: the data object of the row\r\n        // _: the index of the row\r\n        // action: the action object contains some encapsulated functions\r\n        <a\r\n          key=\"editable\"\r\n          onClick={() => {\r\n            action?.startEditable?.(record.answerId);\r\n          }}\r\n        >\r\n          Edit\r\n        </a>,\r\n        <a\r\n          key=\"delete\"\r\n          onClick={() => {\r\n            const newAnswers = answers.filter((item) => item.answerId !== record.answerId);\r\n            if (!newAnswers.find(answer => answer.correct === true)) {\r\n              message.warning('At least one answer should be marked as correct.');\r\n            }\r\n            if (newAnswers.length < 3) {\r\n              message.warning('At least 3 answers are required.');\r\n            }\r\n            if (newAnswers.length > 6) {\r\n              message.warning('At most 6 answers are allowed.');\r\n            }\r\n            dispatch(setEditingAnswers({questionId, answers: newAnswers}));\r\n            message.success('Answer deleted');\r\n          }}\r\n        >\r\n          Delete\r\n        </a>,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <EditableProTable<Answer>\r\n      rowKey=\"answerId\"\r\n      pagination={false}\r\n      // Column definitions\r\n      columns={columns}\r\n      value={answers}\r\n      // Update the answers when the table value changes\r\n      onChange={(value) => dispatch(setEditingAnswers({questionId, answers: value as Answer[]}))}\r\n      editable={{\r\n        type: 'multiple',\r\n        editableKeys,\r\n        onSave: async (rowKey, data, row) => {\r\n          console.log(rowKey, data, row);\r\n          const newAnswers = [...answers.filter(answer => answer.answerId !== data.answerId), data];\r\n          if (!newAnswers.find(answer => answer.correct === true)) {\r\n            message.warning('At least one answer should be marked as correct.');\r\n          }\r\n          if (newAnswers.length < 3) {\r\n            message.warning('At least 3 answers are required.');\r\n          }\r\n          if (newAnswers.length > 6) {\r\n            message.warning('At most 6 answers are allowed.');\r\n          }\r\n          dispatch(setEditingAnswers({questionId, answers: newAnswers}));\r\n          message.success('Answer saved');\r\n      },\r\n        onChange: setEditableKeys,\r\n      }}\r\n      // Logic to add a new line\r\n      recordCreatorProps={{\r\n        position: 'bottom',\r\n        record: () => ({\r\n          answerId: answers.length + 1,\r\n          answer: '',\r\n          colour: '#000000',\r\n          correct: false,\r\n        }),\r\n        creatorButtonText: 'Add a new answer',\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AnswersEditTable;\r\n","import React, { useState } from 'react';\r\nimport { Button, Popconfirm, message } from 'antd';\r\nimport { DragSortTable, ProColumns } from '@ant-design/pro-components';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport AnswersEditTable from './AnswersEditTable';\r\nimport { Question } from '@/types/UserStore';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setEditingQuestions } from '@/store/modules/userStore';\r\n\r\nconst QuestionEditTable: React.FC<{\r\n}> = () => {\r\n  const [editableKeys, setEditableRowKeys] = useState<React.Key[]>([]);\r\n  const dispatch = useDispatch();\r\n  const [expandedRowKeys, setExpandedRowKeys] = useState<React.Key[]>([]);\r\n\r\n  const questions: Question[] = useSelector((state: any) => state.user.editingQuiz)?.questions || [];\r\n\r\n  // define shape of columns\r\n  const columns: ProColumns<Question>[] = [\r\n    {\r\n      title: 'Sort',\r\n      dataIndex: 'sort',\r\n      className: 'drag-visible',\r\n      editable: false,\r\n    },\r\n    {\r\n      title: 'Name',\r\n      dataIndex: 'question',\r\n      width: 250,\r\n      formItemProps: {\r\n        rules: [\r\n          { required: true, message: 'Name is required' },\r\n          { min: 5, max: 50, message: 'Name must be between 5 and 50 characters' },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      title: 'Points',\r\n      dataIndex: 'points',\r\n      valueType: 'digit',\r\n      formItemProps: {\r\n        rules: [\r\n          { required: true, message: 'Points are required' },\r\n          {\r\n            validator: (_, value) => {\r\n              if (value < 1 || value > 10) {\r\n                return Promise.reject('Points must be between 1 and 10');\r\n              }\r\n              return Promise.resolve();\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      title: 'Duration',\r\n      dataIndex: 'duration',\r\n      valueType: 'digit',\r\n      formItemProps: {\r\n        rules: [\r\n          { required: true, message: 'Duration is required' },\r\n          {\r\n            validator: (_, value) => {\r\n              if (value <= 0) {\r\n                return Promise.reject('Duration must be a positive number');\r\n              }\r\n              return Promise.resolve();\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n    {\r\n      title: '# Answers',\r\n      editable: false,\r\n      render: (_, record) => record.answers?.length || 0,\r\n    },\r\n    {\r\n      title: 'Action',\r\n      valueType: 'option',\r\n      render: (_, record, __, action) => [\r\n        <a\r\n          key=\"editable\"\r\n          onClick={() => {\r\n            action?.startEditable?.(record.questionId);\r\n          }}\r\n        >\r\n          Edit\r\n        </a>,\r\n        <Popconfirm\r\n          key=\"delete\"\r\n          title=\"Are you sure to delete this question?\"\r\n          onConfirm={() => {\r\n            const newQuestions = questions.filter((item) => item.questionId !== record.questionId);\r\n            dispatch(setEditingQuestions({questions: newQuestions}));\r\n            message.success('Deleted successfully');\r\n          }}\r\n        >\r\n          <a>Delete</a>\r\n        </Popconfirm>,\r\n      ],\r\n    },\r\n  ];\r\n\r\n  const handleDragSortEnd = (beforeIndex: number, afterIndex: number, newQuestions: any) => {\r\n    console.log('排序后的数据', newQuestions);\r\n    dispatch(setEditingQuestions({questions: newQuestions}));\r\n    message.success('修改列表排序成功');\r\n  };\r\n\r\n  return (\r\n    <DragSortTable<Question>\r\n      headerTitle=\"Questions\"\r\n      // 关闭分页器\r\n      pagination={false}\r\n      columns={columns}\r\n      rowKey=\"questionId\"\r\n      dataSource={questions}\r\n      onChange={(value) => dispatch(setEditingQuestions({questions: value as Question[]}))}\r\n      dragSortKey=\"sort\"\r\n      onDragSortEnd={handleDragSortEnd}\r\n      expandable={{\r\n        // Render the expanded row with the AnswersEditTable component\r\n        expandedRowRender: (record) => {\r\n          return <AnswersEditTable questionId={record.questionId} />;\r\n        },\r\n        defaultExpandedRowKeys: expandedRowKeys,\r\n        onExpand: (expanded, record) => {\r\n          if (expanded) {\r\n            setExpandedRowKeys(prevKeys => [...prevKeys, record.questionId]);\r\n          } else {\r\n            setExpandedRowKeys(prevKeys => prevKeys.filter(key => key !== record.questionId));\r\n          }\r\n        },\r\n      }}\r\n      editable={{\r\n        type: 'multiple',\r\n        editableKeys,\r\n        onSave: async (rowKey, data, row) => {\r\n          console.log(rowKey, data, row);\r\n          const newQuestions = questions.map(q => q.questionId === data.questionId ? data : q);\r\n          dispatch(setEditingQuestions({questions: newQuestions}));\r\n        },\r\n        onChange: setEditableRowKeys,\r\n      }}\r\n      search={false}\r\n      // tool bar options\r\n      options={{\r\n        search: false,\r\n        fullScreen: false,\r\n        reload: false,\r\n        setting: false,\r\n        density: false,\r\n      }}\r\n      toolBarRender={() => [\r\n        <Button\r\n          type=\"primary\"\r\n          key=\"add\"\r\n          onClick={() => {\r\n            const newId = questions.length + 1;\r\n            const newRow: Question = {\r\n              questionId: newId,\r\n              question: `New Question ${newId}`,\r\n              duration: 10,\r\n              points: 1,\r\n              answers: [],\r\n            };\r\n            dispatch(setEditingQuestions({questions: [...questions, newRow]}));\r\n            setEditableRowKeys([...editableKeys, newId]);\r\n          }}\r\n          icon={<PlusOutlined />}\r\n        >\r\n          Add New Row\r\n        </Button>,\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nexport default QuestionEditTable;\r\n","import { ModalForm, ProForm, ProFormText } from '@ant-design/pro-form';\r\nimport QuestionEditTable from './QuestionEditTable';\r\nimport { Button, Form, message, Popconfirm } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchCreateQuiz, fetchDeleteQuiz, fetchEditQuiz } from '@/store/modules/userStore';\r\nimport { AxiosError } from 'axios';\r\nimport React from 'react';\r\n\r\nconst QuizEditModal: React.FC<{\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n}> = ({ open, setOpen }) => {\r\n  const [form] = Form.useForm<{ name: string; description: string }>();\r\n  const dispatch = useDispatch();\r\n\r\n  const quiz = useSelector((state: any) => state.user.editingQuiz);\r\n\r\n  const isCreatingQuiz = quiz.name === undefined;\r\n\r\n  return (\r\n    <ModalForm<{\r\n      name: string;\r\n      description: string;\r\n    }>\r\n      title={<h1 className=\"mb-6 text-2xl font-bold\">{isCreatingQuiz ? 'Create Quiz' : 'Edit Quiz'}</h1>}\r\n      open={open}\r\n      form={form}\r\n      autoFocusFirstInput\r\n      modalProps={{\r\n        destroyOnClose: true,\r\n        onCancel: () => setOpen(false),\r\n      }}\r\n      submitTimeout={2000}\r\n      onFinish={async (values) => {\r\n        try {\r\n          console.log(values);\r\n          if (isCreatingQuiz) {\r\n            await dispatch(fetchCreateQuiz(values.name, values.description));\r\n          } else {\r\n            await dispatch(fetchEditQuiz(quiz.quizId, values.name, values.description));\r\n          }\r\n          message.success('Submitted successfully');\r\n          setOpen(false);\r\n          return true;\r\n        } catch (error) {\r\n          console.log(error);\r\n          if (error instanceof AxiosError) {\r\n            message.error(error.response?.data?.error);\r\n          } else {\r\n            message.error('Failed to submit');\r\n          }\r\n        }\r\n      }}\r\n      onFinishFailed={() => {\r\n        message.error('Failed to submit');\r\n      }}\r\n      // modify submitter to add delete button\r\n      submitter={{\r\n        render: (props, defaultDoms) => {\r\n          return [\r\n            !isCreatingQuiz && (\r\n              <Popconfirm\r\n                title=\"Are you sure you want to delete this quiz?\"\r\n                onConfirm={async () => {\r\n                  try {\r\n                    await dispatch(fetchDeleteQuiz(quiz.quizId));\r\n                    setOpen(false);\r\n                    message.success('Deleted successfully');\r\n                  } catch (error) {\r\n                    message.error('Failed to delete');\r\n                  }\r\n                }}\r\n                okText=\"Yes\"\r\n                cancelText=\"No\"\r\n              >\r\n                <Button\r\n                  key=\"delete\"\r\n                  danger\r\n                >\r\n                  Delete\r\n                </Button>\r\n              </Popconfirm>\r\n            ),\r\n            // change submit button text\r\n            ...defaultDoms.map(dom => \r\n              dom.key === 'submit' \r\n                ? React.cloneElement(dom, { children: isCreatingQuiz ? 'Create' : 'Save' })\r\n                : dom\r\n            ),\r\n          ];\r\n        },\r\n      }}\r\n    >\r\n      <ProForm.Group>\r\n        <ProFormText\r\n          width=\"md\"\r\n          name=\"name\"\r\n          label=\"Quiz Name\"\r\n          placeholder=\"Quiz Name\"\r\n          initialValue={quiz?.name}\r\n          rules={[\r\n            { required: true, message: 'Quiz name is required' },\r\n            {\r\n              pattern: /^[a-z0-9\\s]+$/i,\r\n              message: 'Quiz name can only contain letters, numbers, and spaces',\r\n            },\r\n          ]}\r\n        />\r\n\r\n        <ProFormText\r\n          width=\"md\"\r\n          name=\"description\"\r\n          label=\"Quiz Description\"\r\n          placeholder=\"Quiz Description\"\r\n          initialValue={quiz?.description}\r\n          rules={[\r\n            { required: true, message: 'Quiz description is required' },\r\n            {\r\n              max: 100,\r\n              message: 'Description must be less than 100 characters',\r\n            },\r\n          ]}\r\n        />\r\n      </ProForm.Group>\r\n\r\n      <QuestionEditTable />\r\n    </ModalForm>\r\n  );\r\n};\r\n\r\nexport default QuizEditModal;\r\n","import {\r\n  Button,\r\n  ConfigProvider,\r\n  Flex,\r\n  Layout,\r\n  message,\r\n  Segmented,\r\n} from 'antd';\r\nimport { Content, Header } from 'antd/es/layout/layout';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchQuizzes, setEditingQuiz, setQuizzes } from '@/store/modules/userStore';\r\nimport { Quiz as QuizType } from '@/types/UserStore';\r\nimport QuizCard from './QuizCard';\r\nimport QuizEditModal from './QuizEditModal';\r\n\r\nconst Quiz: React.FC = () => {\r\n\r\n  /////////////////////////////////////////////////////////////////////\r\n  // Quiz Data Fetching\r\n  /////////////////////////////////////////////////////////////////////\r\n  // use dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // fetch quizzes every time the page is loaded\r\n  useEffect(() => {\r\n    try {\r\n      dispatch(fetchQuizzes());\r\n    } catch (error) {\r\n      console.error(error);\r\n      message.error('Failed to fetch quizzes');\r\n    }\r\n  }, []);\r\n\r\n  // get quizzes from redux store\r\n  const quizzes: QuizType[] = useSelector((state: any) => state.user.quizzes);\r\n  /////////////////////////////////////////////////////////////////////\r\n  // \\Quiz Data Fetching\r\n  /////////////////////////////////////////////////////////////////////\r\n\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [selectedQuizId, setSelectedQuizId] = useState<number | null>(null);\r\n  const onQuizCardClick = (quizId: number) => {\r\n    setSelectedQuizId(quizId);\r\n    const quiz = quizzes.find((quiz) => quiz.quizId === quizId);\r\n    const emptyQuiz = {\r\n      questions: [],\r\n    }\r\n    dispatch(setEditingQuiz(quiz || emptyQuiz));\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  return (\r\n    <ConfigProvider theme={{ components: { Layout: { headerBg: '#f5f5f5' } } }}>\r\n      <Layout>\r\n        {/* Control Bar */}\r\n        <Header className=\"flex items-center justify-between px-0\">\r\n          <div>\r\n            <Button type=\"primary\" className=\"mr-2\" onClick={() => onQuizCardClick(0)}>\r\n              Create new quiz\r\n            </Button>\r\n          </div>\r\n          <Segmented<string>\r\n            options={['Recent Edited', 'Newest', 'Oldest']}\r\n            onChange={(value) => {\r\n              console.log(value); // string\r\n              const sortedQuizzes = quizzes.slice().sort((a, b) => {\r\n                if (value === 'Recent Edited') {\r\n                  return b.timeLastEdited - a.timeLastEdited;\r\n                } else if (value === 'Newest') {\r\n                  return b.timeCreated - a.timeCreated;\r\n                } else if (value === 'Oldest') {\r\n                  return a.timeCreated - b.timeCreated;\r\n                }\r\n                return 0;\r\n              });\r\n              dispatch(setQuizzes(sortedQuizzes));\r\n            }}\r\n          />\r\n        </Header>\r\n\r\n        {/* Quiz Cards */}\r\n        <Content>\r\n          <Flex style={{ flexWrap: 'wrap' }} justify={'flex-start'} align={'flex-start'} gap={8}>\r\n            {quizzes.map((quiz) => (\r\n              <QuizCard key={quiz.quizId} quiz={quiz} onClick={() => onQuizCardClick(quiz.quizId)} />\r\n            ))}\r\n          </Flex>\r\n        </Content>\r\n      </Layout>\r\n\r\n      {/* Quiz Edit Modal */}\r\n      <QuizEditModal open={isModalOpen} setOpen={setIsModalOpen} />\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default Quiz;\r\n","import { message } from 'antd';\r\nimport { AxiosError } from 'axios';\r\n\r\nexport async function catchAxiosError(fn: (...args: any[]) => unknown) {\r\n  try {\r\n    await fn();\r\n  } catch (error) {\r\n    if (error instanceof AxiosError) {\r\n      return message.error(error.response?.data?.error || 'Internal server error');\r\n    }\r\n    if (error instanceof Error) {\r\n      return message.error(error.message);\r\n    }\r\n    \r\n    return message.error('An unknown error occurred');\r\n  }\r\n}\r\n"],"names":["QuizDescription","_ref","quiz","items","key","label","children","Date","timeCreated","toLocaleDateString","duration","_jsx","Descriptions","title","name","column","size","_ref2","onClick","Card","hoverable","className","cover","src","alt","_jsxs","Button","type","async","ev","stopPropagation","catchAxiosError","startNum","prompt","data","sessionId","quizSessionCreate","quizId","parseInt","window","open","_useSelector","_useSelector$question","_useSelector$question2","questionId","dispatch","useDispatch","answers","useSelector","state","user","editingQuiz","questions","find","question","editableKeys","setEditableKeys","useState","columns","Tooltip","QuestionCircleOutlined","dataIndex","width","formItemProps","rules","required","message","max","valueType","valueEnum","true","text","status","false","render","_","record","style","color","correct","action","_action$startEditable","startEditable","call","answerId","newAnswers","filter","item","answer","warning","length","setEditingAnswers","success","EditableProTable","rowKey","pagination","value","onChange","editable","onSave","row","console","log","recordCreatorProps","position","colour","creatorButtonText","QuestionEditTable","setEditableRowKeys","expandedRowKeys","setExpandedRowKeys","min","validator","Promise","reject","resolve","_record$answers","__","Popconfirm","onConfirm","newQuestions","setEditingQuestions","DragSortTable","headerTitle","dataSource","dragSortKey","onDragSortEnd","handleDragSortEnd","beforeIndex","afterIndex","expandable","expandedRowRender","AnswersEditTable","defaultExpandedRowKeys","onExpand","expanded","prevKeys","map","q","search","options","fullScreen","reload","setting","density","toolBarRender","newId","newRow","points","icon","PlusOutlined","setOpen","form","Form","useForm","isCreatingQuiz","undefined","ModalForm","autoFocusFirstInput","modalProps","destroyOnClose","onCancel","submitTimeout","onFinish","values","fetchCreateQuiz","description","fetchEditQuiz","error","_error$response","_error$response$data","AxiosError","response","onFinishFailed","submitter","props","defaultDoms","fetchDeleteQuiz","okText","cancelText","danger","dom","React","ProForm","Group","ProFormText","placeholder","initialValue","pattern","Quiz","useEffect","fetchQuizzes","quizzes","isModalOpen","setIsModalOpen","selectedQuizId","setSelectedQuizId","onQuizCardClick","setEditingQuiz","ConfigProvider","theme","components","Layout","headerBg","Header","Segmented","sortedQuizzes","slice","sort","a","b","timeLastEdited","setQuizzes","Content","Flex","flexWrap","justify","align","gap","QuizCard","QuizEditModal","fn","Error"],"sourceRoot":""}